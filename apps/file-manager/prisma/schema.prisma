generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PG_DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  email     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  albums    Album[]

  @@map("users")
}

model Album {
  id        String      @id @default(uuid())
  name      String
  userId    String      @map("user_id")
  status    AlbumStatus @default(ACTIVE)
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  files File[]

  @@map("albums")
}

enum AlbumStatus {
  ACTIVE
  DELETED
}

model File {
  id        String   @id @default(uuid())
  name      String
  size      BigInt
  type      String
  mimeType  String   @map("mime_type")
  extension String
  albumId   String   @map("album_id")
  uploaded  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  album Album @relation(fields: [albumId], references: [id], onDelete: Cascade)

  @@map("files")
}

model Outbox {
  id              String     @id @default(uuid())
  type            OutboxType
  aggregateId     String     @map("aggregate_id")
  payload         Json
  retryCount      Int        @default(0)
  lastAttemptedAt DateTime?  @map("last_attempted_at")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")

  @@index([type, aggregateId])
  @@map("outbox")
}

enum OutboxType {
  FILE_DELETED
}
