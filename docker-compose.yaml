version: '3.8'

services:
  # User Management Service
  user-service-mongodb:
    image: mongo:latest
    container_name: user-service-mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=root
    volumes:
      - mongodb_data:/data/db

  user-service:
    container_name: user-service-app
    restart: always
    build:
      context: ./user
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    working_dir: /usr/app
    command: [ "npm", "start" ]
    depends_on:
      user-service-mongodb:
        condition: service_started
      kafka:
        condition: service_started

  # Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://kafka:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: "/var/lib/kafka/data"
    volumes:
      - kafka-data:/var/lib/kafka/data
    depends_on:
      zookeeper:
        condition: service_started

  # Kong API Gateway
  kong-database:
    image: postgres:9.6
    container_name: kong-database
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DB: kong
    volumes:
      - kong-db:/var/lib/postgresql/data

  kong-migration:
    image: kong:latest
    container_name: kong-migration
    command: kong migrations bootstrap
    environment:
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
    depends_on:
      - kong-database

  kong:
    image: kong:latest
    container_name: kong
    restart: always
    environment:
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001, 0.0.0.0:8444 ssl'
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    depends_on:
      kong-database:
        condition: service_started

  konga:
    image: pantsel/konga:latest
    container_name: konga
    restart: always
    environment:
      - NODE_ENV=development
      - DB_ADAPTER=postgres
      - DB_URI=postgresql://kong:kong@kong-database:5432/kong
    ports:
      - "1337:1337"
    depends_on:
      kong-database:
        condition: service_started
      kong:
        condition: service_started

  # Notification Service  
  notification-service:
    container_name: notification-service-app
    restart: always
    build:
      context: ./notification
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    working_dir: /usr/app
    command: [ "npm", "start" ]
    depends_on:
      mailhog:
        condition: service_started
      kafka:
        condition: service_started

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    ports:
      - "1025:1025"
      - "8025:8025"

  # File Manager Service
  file-manager-postgres:
    image: postgres:9.6
    container_name: file-manager-postgres
    environment:
      POSTGRES_USER: filemanager
      POSTGRES_PASSWORD: filemanager
      POSTGRES_DB: filemanager
    ports:
      - "5432:5432"
    volumes:
      - file-manager-postgres:/var/lib/postgresql/data

  s3:
    image: localstack/localstack
    container_name: s3
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3
      - DEFAULT_REGION=us-east-1
      - DATA_DIR=/tmp/localstack/data
    volumes:
      - "localstack-s3:/tmp/localstack-s3"

  file-manager-redis:
    image: redis:latest
    container_name: file-manager-redis
    ports:
      - "6379:6379"
    command: redis-server --requirepass redis
    volumes:
      - redis-data:/data

volumes:
  mongodb_data:
  kong-db:
  kafka-data:
  zookeeper-data:
  zookeeper-log:
  file-manager-postgres:
  localstack-s3:
  redis-data:
